<?xml version="1.0"?>
<robot
  xmlns:xacro="http://ros.org/wiki/xacro"
  xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
  xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
  xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
  name="robot">

<xacro:macro name="box_inertial" params="x y z mass">
    <inertial>
    <mass value="${mass}" />
    <origin xyz="0 0 0" />
    <inertia ixx="${0.0833333 * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0"
        iyy="${0.0833333 * mass * (x*x + z*z)}" iyz="0.0"
        izz="${0.0833333 * mass * (x*x + y*y)}" />
    </inertial>
</xacro:macro>

<xacro:macro name="cylinder_inertial_with_origin" params="radius length mass *origin">
<inertial>
    <mass value="${mass}" />
    <xacro:insert_block name="origin" />
    <inertia ixx="${0.0833333 * mass * (3 * radius * radius + length * length)}" ixy="0.0" ixz="0.0"
    iyy="${0.0833333 * mass * (3 * radius * radius + length * length)}" iyz="0.0"
    izz="${0.5 * mass * radius * radius}" />
</inertial>
</xacro:macro>

<xacro:property name="M_PI" value="3.14159265359"/>

<xacro:property name="imu_stdev" value="0.00017" />

<xacro:property name="body_height" value="0.15"/>
<xacro:property name="body_length" value="0.38"/>
<xacro:property name="body_width" value="0.32"/>

<xacro:property name="axis_front" value="0.14"/>
<xacro:property name="axis_back" value="-0.14"/>

<xacro:property name="wheel_thickness" value="0.07"/>
<xacro:property name="wheel_body_offset" value="${wheel_thickness/2 + 0.015}"/>
<xacro:property name="wheel_radius" value="0.135"/>
<xacro:property name="axis_height" value="-0.03"/>
<xacro:property name="axis_right" value="${-body_width/2 - wheel_body_offset}"/>
<xacro:property name="axis_left" value="${body_width/2 + wheel_body_offset}"/>
<xacro:property name="axis_length" value="${body_width + 2 * wheel_body_offset}" />
<xacro:property name="turning_adaptation" value="2.95" />

<xacro:property name="body_mass" value="25.0"/>
<xacro:property name="wheel_mass" value="5.0"/>

<xacro:property name="imu_width" value="0.036"/>
<xacro:property name="imu_length" value="0.038"/>
<xacro:property name="imu_height" value="0.012"/>

<xacro:property name="imu_offset_x" value="0"/>
<xacro:property name="imu_offset_y" value="0"/>
<xacro:property name="imu_offset_z" value="${- body_height/2 + 0.005 + 0.007}"/>

<xacro:property name="em_body_length" value="0.11"/>
<xacro:property name="em_body_width" value="0.04"/>
<xacro:property name="em_body_height" value="0.03"/>

<xacro:property name="em_button_radius" value="0.0125"/>
<xacro:property name="em_button_depth" value="0.02" />

<link name="base_footprint" />

<link name="base_link">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="${body_length} ${body_width} ${body_height}"/>
        </geometry>
        <material name="silver" >
            <color rgba="0.5 0.5 0.5 1" />
        </material>
    </visual>
    <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="${body_length} ${body_width} ${body_height}"/>
        </geometry>
    </collision>
    <xacro:box_inertial
        x="${body_length}"
        y="${body_width}"
        z="${body_height}"
        mass="${body_mass}"/>
</link>

<joint name="base_footprint_to_base_joint" type="fixed">
    <origin xyz="0 0 ${wheel_radius - axis_height}" rpy="0 0 0" />
    <parent link="base_footprint" />
    <child link="base_link" />
</joint>

<!-- WHEELS -->
<xacro:include filename="$(find rmcl_example)/urdf/wheel.urdf.xacro" />

<xacro:wheel name="left_front_wheel" parent="base_link">
    <origin xyz="${axis_front} ${axis_left} ${axis_height}" rpy="0 0 0"/>
</xacro:wheel>

<xacro:wheel name="left_rear_wheel" parent="base_link">
    <origin xyz="${axis_back} ${axis_left} ${axis_height}" rpy="0 0 0" />
</xacro:wheel>

<xacro:wheel name="right_front_wheel" parent="base_link">
    <origin xyz="${axis_front} ${axis_right} ${axis_height}" rpy="0 0 0"/>
</xacro:wheel>

<xacro:wheel name="right_rear_wheel" parent="base_link">
    <origin xyz="${axis_back} ${axis_right} ${axis_height}" rpy="0 0 0" />
</xacro:wheel>

<!-- SICK -->
<xacro:include filename="$(find sick_tim)/urdf/sick_tim.urdf.xacro" />
<xacro:sick_tim551 name="sick" ros_topic="sick/scan" />

<joint name="sick_to_base_joint" type="fixed">
    <parent link="base_link" />
    <child link="sick_mount_link" />
    <origin xyz="${body_length/2 - 0.05} 0 ${body_height/2 - 0.015}"/>
</joint>

<!-- Velodyne -->
<link name="velodyne">
    <inertial>
        <mass value="0.83"/>
        <origin xyz="0 0 0.03585"/>
        <inertia ixx="${(0.83 * (3.0*0.0516*0.0516 + 0.0717*0.0717)) / 12.0}" ixy="0" ixz="0"
            iyy="${(0.83 * (3.0*0.0516*0.0516 + 0.0717*0.0717)) / 12.0}" iyz="0"
            izz="${0.5 * 0.83 * (0.0516*0.0516)}"/>
    </inertial>
    <visual>
        <origin rpy="0 0 0" xyz="0 0 0.03585"/>
        <geometry>
            <cylinder radius="0.0516" length="0.0717"/>
        </geometry>
    </visual>
    <collision>
        <origin rpy="0 0 0" xyz="0 0 0.03585"/>
        <geometry>
            <cylinder radius="0.0516" length="0.0717"/>
        </geometry>
    </collision>
</link>

<joint name="velodyne_to_base_joint" type="fixed">
    <parent link="base_link" />
    <child link="velodyne" />
    <origin xyz="0 0 0.4" rpy="0.0 0.0 0.0" />
</joint>

<gazebo reference="velodyne">
<sensor type="ray" name="velodyne-vlp16">
    <pose>0 0 0 0 0 0</pose>
    <visualize>false</visualize>
    <update_rate>20</update_rate>
    <ray>
    <scan>
        <horizontal>
        <samples>440</samples>
        <resolution>1</resolution>
        <min_angle>-${M_PI}</min_angle>
        <max_angle>${M_PI}</max_angle>
        </horizontal>
        <vertical>
        <samples>16</samples>
        <resolution>1</resolution>
        <min_angle>-${M_PI*15.0/180.0}</min_angle>
        <max_angle> ${M_PI*15.0/180.0}</max_angle>
        </vertical>
    </scan>
    <range>
        <min>0.3</min>
        <max>130.0</max>
        <resolution>0.001</resolution>
    </range>
    <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.0</stddev>
    </noise>
    </ray>
    <plugin name="gazebo_ros_laser_controller" filename="libgazebo_ros_velodyne_laser.so">
        <ros>
            <namespace>/velodyne</namespace>
            <remapping>~/out:=points</remapping>
        </ros>
        <frame_name>velodyne</frame_name>
        <organize_cloud>true</organize_cloud>
        <min_range>0.9</min_range>
        <max_range>130.0</max_range>
        <gaussian_noise>0.008</gaussian_noise>
    </plugin>
</sensor>
</gazebo>

<!-- IMU -->
<link name="imu">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="${imu_length} ${imu_width} ${imu_height}"/>
        </geometry>
        <material name="white" >
            <color rgba="0.8 0.8 0.8 1" />
        </material>
    </visual>
</link>

<joint name="imu_to_base_joint" type="fixed">
    <parent link="base_link" />
    <child link="imu" />
    <!-- <origin xyz="${imu_offset_x} ${imu_offset_y} ${imu_offset_z}" rpy="${M_PI} 0 ${M_PI/2.0}" /> -->
    <origin xyz="${imu_offset_x} ${imu_offset_y} ${imu_offset_z}" rpy="0 0 0" />
</joint>

<gazebo reference="imu">
    <sensor name="imu" type="imu">
    <imu>
        <angular_velocity>
        <x>
            <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>${imu_stdev}</stddev>
            </noise>
        </x>
        <y>
            <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>${imu_stdev}</stddev>
            </noise>
        </y>
        <z>
            <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>${imu_stdev}</stddev>
            </noise>
        </z>
        </angular_velocity>
        <linear_acceleration>
        <x>
            <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>${imu_stdev}</stddev>
            </noise>
        </x>
        <y>
            <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>${imu_stdev}</stddev>
            </noise>
        </y>
        <z>
            <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>${imu_stdev}</stddev>
            </noise>
        </z>
        </linear_acceleration>
    </imu>
    <always_on>true</always_on>
    <update_rate>100.0</update_rate>
        <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <ros>
            <remapping>~/out:=/imu/data_raw</remapping>
        </ros>
        <frame_name>imu</frame_name>
    </plugin>
    </sensor>
</gazebo>

<gazebo>
  <plugin name='skid_steer_drive' filename='libgazebo_ros_diff_drive.so'>
    <update_rate>100.0</update_rate>
    <num_wheel_pairs>2</num_wheel_pairs>
    <!-- wheels0 -->
    <left_joint>left_front_wheel</left_joint>
    <right_joint>right_front_wheel</right_joint>

    <!-- wheels1-->
    <left_joint>left_rear_wheel</left_joint>
    <right_joint>right_rear_wheel</right_joint>

    <!-- kinematics -->
    <wheel_separation>${axis_length}</wheel_separation>
    <wheel_separation>${axis_length}</wheel_separation>

    <wheel_diameter>${2*wheel_radius}</wheel_diameter>
    <wheel_diameter>${2*wheel_radius}</wheel_diameter>

    <!-- limits -->
    <max_wheel_torque>5000</max_wheel_torque>
    <max_wheel_acceleration>3.0</max_wheel_acceleration>

    <!-- Convariance -->
    <covariance_x>0.001</covariance_x>
    <covariance_y>0.001</covariance_y>
    <covariance_yaw>0.001</covariance_yaw>
    
    <!-- output -->
    <publish_odom>true</publish_odom>
    <publish_odom_tf>false</publish_odom_tf>
    <publish_wheel_tf>true</publish_wheel_tf>

    <odometry_frame>odom</odometry_frame>
    <robot_base_frame>base_footprint</robot_base_frame>
  </plugin>
</gazebo>

</robot>
